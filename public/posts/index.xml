<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Discard Changes</title>
    <link>https://discardchanges.com/posts/</link>
    <description>Recent content in Posts on Discard Changes</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Sun, 21 Mar 2021 00:00:00 +0000</lastBuildDate><atom:link href="https://discardchanges.com/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Creating a Terraform Version Manager with PowerShell</title>
      <link>https://discardchanges.com/posts/terraform-version-manager/</link>
      <pubDate>Sun, 21 Mar 2021 00:00:00 +0000</pubDate>
      
      <guid>https://discardchanges.com/posts/terraform-version-manager/</guid>
      <description>If you&amp;rsquo;re a developer who works with Terraform, you know how important it is to have the right version of Terraform installed for your project. But what if you need to work on multiple projects, each with a different version of Terraform? That&amp;rsquo;s where a Terraform version manager comes in.
There are a couple Terraform version managers available for Linux and Mac, including:
tfenv tfswitch These tools allow you to easily switch between different versions of Terraform on your local machine.</description>
    </item>
    
    <item>
      <title>Have Your Cake and Build It Too</title>
      <link>https://discardchanges.com/posts/have-your-cake-and-build-it-too/</link>
      <pubDate>Wed, 26 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://discardchanges.com/posts/have-your-cake-and-build-it-too/</guid>
      <description>In this post I will walk you through the basics of using Cake, a cross-platform build automation system with a C# DSL.
We will create a couple .NET Core projects, then create a Cake file to build, test, and package the app for deployment using Octopus Deploy tools.
Create Project Directory Link to heading Let&amp;rsquo;s start at the beginning and create a new home for our code. I&amp;rsquo;m going to put mine under c:\code, but you do you.</description>
    </item>
    
    <item>
      <title>Building Azure Functions With Precompiled F#</title>
      <link>https://discardchanges.com/posts/building-azure-functions-with-precompiled-fsharp/</link>
      <pubDate>Sun, 29 Apr 2018 00:00:00 +0000</pubDate>
      
      <guid>https://discardchanges.com/posts/building-azure-functions-with-precompiled-fsharp/</guid>
      <description>Previously we looked at Building Azure Functions with F# Script, which is still the only supported way of creating an Azure Function with F#, and a decent option for simple functions. So, if you need to play it safe (and stable) then that&amp;rsquo;s your best bet. However, in this post we are going to take a trip to the edge. We&amp;rsquo;ll be using .NET Core, Azure Functions Core Tools v2, and F#.</description>
    </item>
    
  </channel>
</rss>
